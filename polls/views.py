from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic

from .models import Choice, Question
from django.utils import timezone

class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """Return the last five published questions.(not including those set to be published in the future)."""
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]
# Question.objects.filter(pub_date__lte=timezone.now()) returns a queryset containing Questions whose pub_date is less than or equal to - that is, earlier than or equal to - timezone.now.

class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'
    
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())


class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'

'''
We’re using two generic views here: ListView and DetailView.
Respectively, those two views abstract the concepts of “display a list of objects” and “display a detail page for a particular type of object.”

    Each generic view needs to know what model it will be acting upon. This is provided using the model attribute.
    The DetailView generic view expects the primary key value captured from the URL to be called "pk",
    so we’ve changed question_id to pk for the generic views.

By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html.
In our case, it would use the template "polls/question_detail.html".
The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name.
We also specify the template_name for the results list view – this ensures that the results view and the detail view have a different
appearance when rendered, even though they’re both a DetailView behind the scenes.

Similarly, the ListView generic view uses a default template called <app name>/<model name>_list.html;
we use template_name to tell ListView to use our existing "polls/index.html" template.
'''




def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
        """
            request.POST is a dictionary-like object that lets you access submitted data by key name.
            In this case, request.POST['choice'] returns the ID of the selected choice, as a string. request.POST values are always strings.
            Note that Django also provides request.GET for accessing GET data in the same way – but we’re explicitly using request.POST in our code,
            to ensure that data is only altered via a POST call.
        """
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(
            request,
            "polls/detail.html",
            {"question": question, "error_message": "You didn't select a choice."},
        )
        """
            request.POST['choice'] will raise KeyError if choice wasn’t provided in POST data.
            The above code checks for KeyError and redisplays the question form with an error message if choice isn’t given
        """
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse("polls:results", args=(question.id,)))
        """
        After incrementing the choice count, the code returns an HttpResponseRedirect rather than a normal HttpResponse.
        HttpResponseRedirect takes a single argument: the URL to which the user will be redirected.

        We are using the reverse() function in the HttpResponseRedirect constructor in this example.
        This function helps avoid having to hardcode a URL in the view function.
        It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view.
        For example: '/polls/3/results/'
        """
